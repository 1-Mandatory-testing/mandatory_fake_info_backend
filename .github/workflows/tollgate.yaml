name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  test-and-lint:
    runs-on: ubuntu-latest

    outputs:
      tests_exist: ${{ steps.check_tests.outputs.tests_exist }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Ruff linting check
        continue-on-error: true
        run: |
          # Check for linting issues
          ruff check . > ruff_output.txt 2>&1 || true
          if grep -q "All checks passed!" ruff_output.txt; then
            echo "No linting issues found" > ruff_summary.txt
          else
            echo "Linting issues found:" > ruff_summary.txt
            cat ruff_output.txt >> ruff_summary.txt
          fi

      - name: Check for tests directory
        id: check_tests
        run: |
          if [ -d "test" ] || [ -d "tests" ]; then
            echo "tests_exist=true" >> $GITHUB_OUTPUT
          else
            echo "No tests directory found, skipping tests"
            echo "tests_exist=false" >> $GITHUB_OUTPUT
          fi

      - name: Run tests
        if: steps.check_tests.outputs.tests_exist == 'true'
        continue-on-error: true
        run: |
          echo "Running tests (excluding integration tests)..."
          pytest -m "not integration" --cov=. --cov-report=xml:coverage.xml --cov-report=term-missing --junitxml=test_output.xml || echo "Tests completed"

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ci-outputs
          path: |
            ruff_summary.txt
            test_output.xml
            coverage.xml

  merge-check:
    runs-on: ubuntu-latest
    needs: [test-and-lint]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if branch can be merged
        run: |
          git fetch origin main 2>/dev/null || git fetch origin master 2>/dev/null
          git merge --no-commit --no-ff origin/main 2>/dev/null || git merge --no-commit --no-ff origin/master 2>/dev/null || {
            echo "Merge conflicts detected. Please resolve them before merging.";
            exit 1;
          }

  comment-results:
    runs-on: ubuntu-latest
    needs: [test-and-lint]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download CI outputs
        uses: actions/download-artifact@v4
        with:
          name: ci-outputs
          path: .

      - name: Comment on PR with results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let ruffOutput = '';
            let testOutput = '';
            let failWorkflow = false;

            // Read Ruff linting results
            if (fs.existsSync('ruff_summary.txt')) {
              const ruffContent = fs.readFileSync('ruff_summary.txt', 'utf-8').trim();
              if (ruffContent.includes('No linting issues found')) {
                ruffOutput = 'Code Linting: ‚úÖ No linting issues found';
              } else {
                ruffOutput = '<details>\n' +
                  '<summary>Code Linting: ‚ùå Issues found</summary>\n\n' +
                  '```\n' +
                  ruffContent + '\n' +
                  '```\n' +
                  '</details>';
                failWorkflow = true;
              }
            }

            // Read test results
            if ('${{ needs.test-and-lint.outputs.tests_exist }}' === 'true') {
              if (fs.existsSync('test_output.xml')) {
                const testResults = fs.readFileSync('test_output.xml', 'utf-8');
                
                const testsMatch = testResults.match(/tests="(\d+)"/);
                const failureMatch = testResults.match(/failures="(\d+)"/);
                const errorMatch = testResults.match(/errors="(\d+)"/);
                const totalTests = testsMatch ? parseInt(testsMatch[1]) : 0;
                const failures = failureMatch ? parseInt(failureMatch[1]) : 0;
                const errors = errorMatch ? parseInt(errorMatch[1]) : 0;
                const passed = totalTests - failures - errors;
                
                const testCases = testResults.match(/<testcase.*?(?:\/>|<\/testcase>)/gs) || [];
                
                if (failures === 0 && errors === 0) {
                  const testList = testCases.map(testCase => {
                    const testName = testCase.match(/\bname="([^"]+)"/);
                    if (testName) {
                      return `‚úÖ ${testName[1]}`;
                    }
                    return '‚úÖ Unknown test';
                  });
                  
                  testOutput = '<details>\n' +
                    `<summary>Tests: (${passed} passed, 0 failures, 0 errors) ‚úÖ</summary>\n\n` +
                    '```\n' +
                    testList.join('\n') + '\n' +
                    '```\n' +
                    '</details>';
                } else {
                  const testList = [];
                  
                  testCases.forEach(testCase => {
                    const testName = testCase.match(/\bname="([^"]+)"/);
                    const testId = testName ? testName[1] : 'Unknown test';
                    
                    if (testCase.includes('<failure') || testCase.includes('<error')) {
                      const failureMatch = testCase.match(/<failure.*?>(.*?)<\/failure>/s);
                      const errorMatch = testCase.match(/<error.*?>(.*?)<\/error>/s);
                      const errorMessage = (failureMatch ? failureMatch[1] : errorMatch ? errorMatch[1] : 'Unknown error').trim().replace(/<.*?>/g, '');
                      
                      testList.push(`‚ùå ${testId}\n   Error: ${errorMessage}`);
                    } else {
                      testList.push(`‚úÖ ${testId}`);
                    }
                  });
                  
                  testOutput = '<details>\n' +
                    `<summary>Tests: (${passed} passed, ${failures} failures, ${errors} errors) ‚ùå</summary>\n\n` +
                    '```\n' +
                    testList.join('\n\n') + '\n' +
                    '```\n' +
                    '</details>';
                  failWorkflow = true;
                }
              } else {
                testOutput = 'Tests: ‚ùå Test execution failed';
                failWorkflow = true;
              }
            } else {
              testOutput = 'Tests: ‚ö†Ô∏è No tests directory found';
            }

            let commentBody = '## üîç CI Results\n\n' +
              ruffOutput + '\n\n' +
              testOutput + '\n';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

            if (failWorkflow) {
              core.setFailed('CI issues found: Formatting issues or test failures detected.');
            }
